diff --git a/dom/animation/DocumentTimeline.cpp b/dom/animation/DocumentTimeline.cpp
--- a/dom/animation/DocumentTimeline.cpp
+++ b/dom/animation/DocumentTimeline.cpp
@@ -185,32 +185,34 @@ DocumentTimeline::WillRefresh(mozilla::T
 }
 
 void
 DocumentTimeline::NotifyRefreshDriverCreated(nsRefreshDriver* aDriver)
 {
   MOZ_ASSERT(!mIsObservingRefreshDriver,
              "Timeline should not be observing the refresh driver before"
              " it is created");
+  mIsRefreshDriverDestroyed = false;
 
   if (!mAnimationOrder.isEmpty()) {
     aDriver->AddRefreshObserver(this, Flush_Style);
     mIsObservingRefreshDriver = true;
   }
 }
 
 void
 DocumentTimeline::NotifyRefreshDriverDestroying(nsRefreshDriver* aDriver)
 {
   if (!mIsObservingRefreshDriver) {
     return;
   }
 
   aDriver->RemoveRefreshObserver(this, Flush_Style);
   mIsObservingRefreshDriver = false;
+  mIsRefreshDriverDestroyed = true;
 }
 
 void
 DocumentTimeline::RemoveAnimation(Animation* aAnimation)
 {
   AnimationTimeline::RemoveAnimation(aAnimation);
 
   if (mIsObservingRefreshDriver && mAnimations.IsEmpty()) {
@@ -234,16 +236,20 @@ DocumentTimeline::ToTimeStamp(const Time
   result =
     timing->GetNavigationStartTimeStamp() + (aTimeDuration + mOriginTime);
   return result;
 }
 
 nsRefreshDriver*
 DocumentTimeline::GetRefreshDriver() const
 {
+  if (mIsRefreshDriverDestroyed) {
+    return nullptr;
+  }
+
   nsIPresShell* presShell = mDocument->GetShell();
   if (MOZ_UNLIKELY(!presShell)) {
     return nullptr;
   }
 
   nsPresContext* presContext = presShell->GetPresContext();
   if (MOZ_UNLIKELY(!presContext)) {
     return nullptr;
diff --git a/dom/animation/DocumentTimeline.h b/dom/animation/DocumentTimeline.h
--- a/dom/animation/DocumentTimeline.h
+++ b/dom/animation/DocumentTimeline.h
@@ -28,16 +28,17 @@ class DocumentTimeline final
   : public AnimationTimeline
   , public nsARefreshObserver
 {
 public:
   DocumentTimeline(nsIDocument* aDocument, const TimeDuration& aOriginTime)
     : AnimationTimeline(aDocument->GetParentObject())
     , mDocument(aDocument)
     , mIsObservingRefreshDriver(false)
+    , mIsRefreshDriverDestroyed(false)
     , mOriginTime(aOriginTime)
   {
   }
 
 protected:
   virtual ~DocumentTimeline()
   {
     MOZ_ASSERT(!mIsObservingRefreshDriver, "Timeline should have disassociated"
@@ -86,16 +87,21 @@ protected:
 
   nsCOMPtr<nsIDocument> mDocument;
 
   // The most recently used refresh driver time. This is used in cases where
   // we don't have a refresh driver (e.g. because we are in a display:none
   // iframe).
   mutable TimeStamp mLastRefreshDriverTime;
   bool mIsObservingRefreshDriver;
+  // When a document is reset, it calls NotifyRefreshDriverDestroying on its
+  // document timeline. However, the refresh driver doesn't actually get
+  // destroyed in this case so we set a flag to ensure that GetRefreshDriver
+  // acts as if the refresh driver has been destroyed.
+  bool mIsRefreshDriverDestroyed;
 
   TimeDuration mOriginTime;
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_DocumentTimeline_h
