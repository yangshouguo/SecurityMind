diff --git a/editor/libeditor/html/nsHTMLCSSUtils.cpp b/editor/libeditor/html/nsHTMLCSSUtils.cpp
--- a/editor/libeditor/html/nsHTMLCSSUtils.cpp
+++ b/editor/libeditor/html/nsHTMLCSSUtils.cpp
@@ -838,16 +838,19 @@ nsHTMLCSSUtils::GetCSSPropertyAtom(nsCSS
         *aAtom = nsEditProperty::cssVerticalAlign;
         break;
       case eCSSEditableProperty_whitespace:
         *aAtom = nsEditProperty::cssWhitespace;
         break;
       case eCSSEditableProperty_width:
         *aAtom = nsEditProperty::cssWidth;
         break;
+      case eCSSEditableProperty_NONE:
+        // intentionally empty
+        break;
     }
   }
 }
 
 // Populate aProperty and aValueArray with the CSS declarations equivalent to the
 // value aValue according to the equivalence table aEquivTable
 void
 nsHTMLCSSUtils::BuildCSSDeclarations(nsVoidArray & aPropertyArray,
@@ -1403,16 +1406,21 @@ nsHTMLCSSUtils::GetElementContainerOrSel
 {
   NS_ENSURE_TRUE(aNode, NS_ERROR_NULL_POINTER);
 
   nsCOMPtr<nsIDOMNode> node=aNode, parentNode;
   PRUint16 type;
   nsresult res;
   res = node->GetNodeType(&type);
   if (NS_FAILED(res)) return res;
+
+  if (nsIDOMNode::DOCUMENT_NODE == type) {
+    return NS_ERROR_NULL_POINTER;
+  }
+
   // loop until we find an element
   while (node && nsIDOMNode::ELEMENT_NODE != type) {
     parentNode = node;
     res = parentNode->GetParentNode(getter_AddRefs(node));
     if (NS_FAILED(res)) return res;
     if (node) {
       res = node->GetNodeType(&type);
       if (NS_FAILED(res)) return res;
diff --git a/editor/libeditor/html/nsHTMLEditor.cpp b/editor/libeditor/html/nsHTMLEditor.cpp
--- a/editor/libeditor/html/nsHTMLEditor.cpp
+++ b/editor/libeditor/html/nsHTMLEditor.cpp
@@ -2366,17 +2366,18 @@ nsHTMLEditor::GetCSSBackgroundColorState
   nsresult res = GetSelection(getter_AddRefs(selection));
   if (NS_FAILED(res)) return res;
 
   // get selection location
   nsCOMPtr<nsIDOMNode> parent;
   PRInt32 offset;
   res = GetStartNodeAndOffset(selection, address_of(parent), &offset);
   if (NS_FAILED(res)) return res;
-  
+  if (!parent) return NS_ERROR_NULL_POINTER;
+
   // is the selection collapsed?
   PRBool bCollapsed;
   res = selection->GetIsCollapsed(&bCollapsed);
   if (NS_FAILED(res)) return res;
   nsCOMPtr<nsIDOMNode> nodeToExamine;
   if (bCollapsed || IsTextNode(parent))
   {
     // we want to look at the parent and ancestors
@@ -2400,16 +2401,18 @@ nsHTMLEditor::GetCSSBackgroundColorState
   nsCOMPtr<nsIDOMNode> tmp;
 
   if (aBlockLevel) {
     // we are querying the block background (and not the text background), let's
     // climb to the block container
     nsCOMPtr<nsIDOMNode> blockParent = nodeToExamine;
     if (!isBlock) {
       blockParent = GetBlockNodeParent(nodeToExamine);
+      if (!blockParent)
+        return NS_OK;
     }
 
     // Make sure to not walk off onto the Document node
     nsCOMPtr<nsIDOMElement> element;
     do {
       // retrieve the computed style of background-color for blockParent
       mHTMLCSSUtils->GetComputedProperty(blockParent,
                                          nsEditProperty::cssBackgroundColor,
