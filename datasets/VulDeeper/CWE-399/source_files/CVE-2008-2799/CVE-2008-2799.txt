diff -n -u -p -8 -r3.128.2.3.2.21 jsemit.c
--- mozilla/js/src/jsemit.c	20 Mar 2008 20:43:28 -0000	3.128.2.3.2.21
+++ mozilla/js/src/jsemit.c	16 Jun 2008 14:08:18 -0000
@@ -4434,23 +4434,23 @@ js_EmitTree(JSContext *cx, JSCodeGenerat
       case TOK_DEC:
         /* Emit lvalue-specialized code for ++/-- operators. */
         pn2 = pn->pn_kid;
         JS_ASSERT(pn2->pn_type != TOK_RP);
         op = pn->pn_op;
 
         /*
          * Allocate another stack slot for GC protection in case the initial
-         * value being post-incremented or -decremented is not a number, but
-         * converts to a jsdouble.  In the TOK_NAME cases, op has 0 operand
+         * value being incremented or decremented is not a number, but
+         * converts to a jsdouble. In the TOK_NAME cases, op has 0 operand
          * uses and 1 definition, so we don't need an extra stack slot -- we
          * can use the one allocated for the def.
          */
         if (pn2->pn_type != TOK_NAME &&
-            (js_CodeSpec[op].format & JOF_POST) &&
+            (js_CodeSpec[op].format & (JOF_INC | JOF_DEC)) &&
             (uintN)++cg->stackDepth > cg->maxStackDepth) {
             cg->maxStackDepth = cg->stackDepth;
         }
 
         switch (pn2->pn_type) {
           case TOK_NAME:
             pn2->pn_op = op;
             if (!LookupArgOrVar(cx, &cg->treeContext, pn2))
@@ -4500,17 +4500,17 @@ js_EmitTree(JSContext *cx, JSCodeGenerat
             if (js_Emit1(cx, cg, op) < 0)
                 return JS_FALSE;
             break;
 #endif
           default:
             JS_ASSERT(0);
         }
 
-        if (pn2->pn_type != TOK_NAME && (js_CodeSpec[op].format & JOF_POST))
+        if (pn2->pn_type != TOK_NAME && (js_CodeSpec[op].format & (JOF_INC | JOF_DEC)))
             --cg->stackDepth;
         break;
 
       case TOK_DELETE:
         /*
          * Under ECMA 3, deleting a non-reference returns true -- but alas we
          * must evaluate the operand if it appears it might have side effects.
          */
diff -n -u -p -8 -r3.181.2.17.2.35 jsinterp.c
--- mozilla/js/src/jsinterp.c	22 Mar 2008 05:53:14 -0000	3.181.2.17.2.35
+++ mozilla/js/src/jsinterp.c	16 Jun 2008 14:08:38 -0000
@@ -236,27 +236,28 @@ static JSClass prop_iterator_class = {
                 goto out;                                                     \
         }                                                                     \
     JS_END_MACRO
 
 /*
  * Optimized conversion macros that test for the desired type in v before
  * homing sp and calling a conversion function.
  */
-#define VALUE_TO_NUMBER(cx, v, d)                                             \
+#define VALUE_TO_NUMBER(cx, v, d)   VALUE_TO_NUMBER_GOTO(cx, v, d, goto out)
+#define VALUE_TO_NUMBER_GOTO(cx, v, d, error_goto)                            \
     JS_BEGIN_MACRO                                                            \
         if (JSVAL_IS_INT(v)) {                                                \
             d = (jsdouble)JSVAL_TO_INT(v);                                    \
         } else if (JSVAL_IS_DOUBLE(v)) {                                      \
             d = *JSVAL_TO_DOUBLE(v);                                          \
         } else {                                                              \
             SAVE_SP(fp);                                                      \
             ok = js_ValueToNumber(cx, v, &d);                                 \
             if (!ok)                                                          \
-                goto out;                                                     \
+                error_goto;                                                   \
         }                                                                     \
     JS_END_MACRO
 
 #define POP_BOOLEAN(cx, v, b)                                                 \
     JS_BEGIN_MACRO                                                            \
         v = FETCH_OPND(-1);                                                   \
         if (v == JSVAL_NULL) {                                                \
             b = JS_FALSE;                                                     \
@@ -3252,19 +3253,23 @@ js_Interpret(JSContext *cx, jsbytecode *
           do_incop:
             VALUE_TO_OBJECT(cx, lval, obj);
             if (i < 0)
                 STORE_OPND(i, OBJECT_TO_JSVAL(obj));
             CHECK_ELEMENT_ID(obj, id);
 
             /* The operand must contain a number. */
             SAVE_SP(fp);
+            if (cs->format & JOF_ELEM)
+                JS_KEEP_ATOMS(rt);
+
+            /* From this point the control must flow through finish_incop:. */
             CACHED_GET(OBJ_GET_PROPERTY(cx, obj, id, &rval));
             if (!ok)
-                goto out;
+                goto finish_incop;
 
             /* The expression result goes in rtmp, the updated value in rval. */
             if (JSVAL_IS_INT(rval) &&
                 rval != INT_TO_JSVAL(JSVAL_INT_MIN) &&
                 rval != INT_TO_JSVAL(JSVAL_INT_MAX)) {
                 if (cs->format & JOF_POST) {
                     rtmp = rval;
                     (cs->format & JOF_INC) ? (rval += 2) : (rval -= 2);
@@ -3276,59 +3281,58 @@ js_Interpret(JSContext *cx, jsbytecode *
 
 /*
  * Initially, rval contains the value to increment or decrement, which is not
  * yet converted.  As above, the expression result goes in rtmp, the updated
  * value goes in rval.  Our caller must set vp to point at a GC-rooted jsval
  * in which we home rtmp, to protect it from GC in case the unconverted rval
  * is not a number.
  */
-#define NONINT_INCREMENT_OP_MIDDLE()                                          \
+#define NONINT_INCREMENT_OP_MIDDLE(error_goto)                                \
     JS_BEGIN_MACRO                                                            \
-        VALUE_TO_NUMBER(cx, rval, d);                                         \
+        VALUE_TO_NUMBER_GOTO(cx, rval, d, error_goto);                        \
         if (cs->format & JOF_POST) {                                          \
             rtmp = rval;                                                      \
             if (!JSVAL_IS_NUMBER(rtmp)) {                                     \
                 ok = js_NewNumberValue(cx, d, &rtmp);                         \
                 if (!ok)                                                      \
-                    goto out;                                                 \
+                    error_goto;                                               \
             }                                                                 \
             *vp = rtmp;                                                       \
             (cs->format & JOF_INC) ? d++ : d--;                               \
             ok = js_NewNumberValue(cx, d, &rval);                             \
         } else {                                                              \
             (cs->format & JOF_INC) ? ++d : --d;                               \
             ok = js_NewNumberValue(cx, d, &rval);                             \
             rtmp = rval;                                                      \
+            *vp = rtmp;                                                       \
         }                                                                     \
         if (!ok)                                                              \
-            goto out;                                                         \
+            error_goto;                                                       \
     JS_END_MACRO
 
-                if (cs->format & JOF_POST) {
-                    /*
-                     * We must push early to protect the postfix increment
-                     * or decrement result, if converted to a jsdouble from
-                     * a non-number value, from GC nesting in the setter.
-                     */
-                    vp = sp;
-                    PUSH(JSVAL_VOID);
-                    SAVE_SP(fp);
-                    --i;
-                }
-#ifdef __GNUC__
-                else vp = NULL; /* suppress bogus gcc warnings */
-#endif
-
-                NONINT_INCREMENT_OP_MIDDLE();
+                /*
+                 * We must push early to protect the increment or decrement
+                 * result, if converted to a jsdouble from a non-number value,
+                 * from GC nesting in the setter.
+                 */
+                vp = sp;
+                PUSH(JSVAL_VOID);
+                SAVE_SP(fp);
+                --i;
+                NONINT_INCREMENT_OP_MIDDLE(goto finish_incop);
             }
 
             fp->flags |= JSFRAME_ASSIGNING;
             CACHED_SET(OBJ_SET_PROPERTY(cx, obj, id, &rval));
             fp->flags &= ~JSFRAME_ASSIGNING;
+
+          finish_incop:
+            if (cs->format & JOF_ELEM)
+                JS_UNKEEP_ATOMS(rt);
             if (!ok)
                 goto out;
             sp += i;
             PUSH_OPND(rtmp);
             break;
 
 /*
  * NB: This macro can't use JS_BEGIN_MACRO/JS_END_MACRO around its body because
@@ -3366,17 +3370,17 @@ js_Interpret(JSContext *cx, jsbytecode *
           case JSOP_VARINC:
             FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rtmp, +=, MAX);
           case JSOP_VARDEC:
             FAST_INCREMENT_OP(GET_VARNO(pc), nvars, vars, rtmp, -=, MIN);
 
 #undef FAST_INCREMENT_OP
 
           do_nonint_fast_incop:
-            NONINT_INCREMENT_OP_MIDDLE();
+            NONINT_INCREMENT_OP_MIDDLE(goto out);
             *vp = rval;
             PUSH_OPND(rtmp);
             break;
 
 #define FAST_GLOBAL_INCREMENT_OP(SLOWOP,PRE,OP,MINMAX)                        \
     slot = GET_VARNO(pc);                                                     \
     JS_ASSERT(slot < fp->nvars);                                              \
     lval = fp->vars[slot];                                                    \
@@ -3406,17 +3410,17 @@ js_Interpret(JSContext *cx, jsbytecode *
           case JSOP_GVARDEC:
             FAST_GLOBAL_INCREMENT_OP(JSOP_NAMEDEC, rtmp, -=, MIN);
 
 #undef FAST_GLOBAL_INCREMENT_OP
 
           do_nonint_fast_global_incop:
             vp = sp++;
             SAVE_SP(fp);
-            NONINT_INCREMENT_OP_MIDDLE();
+            NONINT_INCREMENT_OP_MIDDLE(goto out);
             OBJ_SET_SLOT(cx, obj, slot, rval);
             STORE_OPND(-1, rtmp);
             break;
 
           case JSOP_GETPROP:
             /* Get an immediate atom naming the property. */
             atom = GET_ATOM(cx, script, pc);
             id   = ATOM_TO_JSID(atom);
