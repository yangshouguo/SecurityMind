diff -uprN linux-2.6.24.7.noarch.default/include/net/af_unix.h linux-2.6.24.7.noarch/include/net/af_unix.h
--- linux-2.6.24.7.noarch.default/include/net/af_unix.h	2008-11-26 21:14:54.589544000 -0500
+++ linux-2.6.24.7.noarch/include/net/af_unix.h	2008-11-26 21:29:53.361005000 -0500
@@ -9,6 +9,7 @@
 extern void unix_inflight(struct file *fp);
 extern void unix_notinflight(struct file *fp);
 extern void unix_gc(void);
+extern void wait_for_unix_gc(void);
 
 #define UNIX_HASH_SIZE	256
 
diff -uprN linux-2.6.24.7.noarch.default/net/unix/af_unix.c linux-2.6.24.7.noarch/net/unix/af_unix.c
--- linux-2.6.24.7.noarch.default/net/unix/af_unix.c	2008-11-26 21:14:54.608544000 -0500
+++ linux-2.6.24.7.noarch/net/unix/af_unix.c	2008-11-26 21:30:55.557826000 -0500
@@ -1352,6 +1352,7 @@ static int unix_dgram_sendmsg(struct kio
 
 	if (NULL == siocb->scm)
 		siocb->scm = &tmp_scm;
+	wait_for_unix_gc();
 	err = scm_send(sock, msg, siocb->scm);
 	if (err < 0)
 		return err;
@@ -1504,6 +1505,7 @@ static int unix_stream_sendmsg(struct ki
 
 	if (NULL == siocb->scm)
 		siocb->scm = &tmp_scm;
+	wait_for_unix_gc();
 	err = scm_send(sock, msg, siocb->scm);
 	if (err < 0)
 		return err;
diff -uprN linux-2.6.24.7.noarch.default/net/unix/garbage.c linux-2.6.24.7.noarch/net/unix/garbage.c
--- linux-2.6.24.7.noarch.default/net/unix/garbage.c	2008-11-26 21:14:54.621547000 -0500
+++ linux-2.6.24.7.noarch/net/unix/garbage.c	2008-11-26 21:32:46.184175000 -0500
@@ -80,6 +80,7 @@
 #include <linux/file.h>
 #include <linux/proc_fs.h>
 #include <linux/mutex.h>
+#include <linux/wait.h>
 
 #include <net/sock.h>
 #include <net/af_unix.h>
@@ -91,6 +92,7 @@
 static LIST_HEAD(gc_inflight_list);
 static LIST_HEAD(gc_candidates);
 static DEFINE_SPINLOCK(unix_gc_lock);
+static DECLARE_WAIT_QUEUE_HEAD(unix_gc_wait);
 
 unsigned int unix_tot_inflight;
 
@@ -266,12 +268,16 @@ static void inc_inflight_move_tail(struc
 		list_move_tail(&u->link, &gc_candidates);
 }
 
-/* The external entry point: unix_gc() */
+static bool gc_in_progress = false;
 
-void unix_gc(void)
+void wait_for_unix_gc(void)
 {
-	static bool gc_in_progress = false;
+	wait_event(unix_gc_wait, gc_in_progress == false);
+}
 
+/* The external entry point: unix_gc() */
+void unix_gc(void)
+{
 	struct unix_sock *u;
 	struct unix_sock *next;
 	struct sk_buff_head hitlist;
@@ -376,6 +382,7 @@ void unix_gc(void)
 	/* All candidates should have been detached by now. */
 	BUG_ON(!list_empty(&gc_candidates));
 	gc_in_progress = false;
+	wake_up(&unix_gc_wait);
 
  out:
 	spin_unlock(&unix_gc_lock);
