diff --git a/modules/plugin/base/src/nsJSNPRuntime.cpp b/modules/plugin/base/src/nsJSNPRuntime.cpp
--- a/modules/plugin/base/src/nsJSNPRuntime.cpp
+++ b/modules/plugin/base/src/nsJSNPRuntime.cpp
@@ -1036,17 +1036,18 @@ nsJSObjWrapper::GetNewOrUsed(NPP npp, JS
   JSClass *clazz = JS_GET_CLASS(cx, obj);
 
   if (clazz == &sNPObjectJSWrapperClass) {
     // obj is one of our own, its private data is the NPObject we're
     // looking for.
 
     NPObject *npobj = (NPObject *)::JS_GetPrivate(cx, obj);
 
-    return _retainobject(npobj);
+    if (LookupNPP(npobj) == npp)
+      return _retainobject(npobj);
   }
 
   if (!sJSObjWrappers.ops) {
     // No hash yet (or any more), initialize it.
 
     static PLDHashTableOps ops =
       {
         PL_DHashAllocTable,
@@ -1983,20 +1984,18 @@ nsJSNPRuntime::OnPluginDestroy(NPP npp)
 }
 
 
 // Find the NPP for a NPObject.
 static NPP
 LookupNPP(NPObject *npobj)
 {
   if (npobj->_class == &nsJSObjWrapper::sJSObjWrapperNPClass) {
-    NS_ERROR("NPP requested for NPObject of class "
-             "nsJSObjWrapper::sJSObjWrapperNPClass!\n");
-
-    return nsnull;
+    nsJSObjWrapper* o = static_cast<nsJSObjWrapper*>(npobj);
+    return o->mNpp;
   }
 
   NPObjWrapperHashEntry *entry = static_cast<NPObjWrapperHashEntry *>
     (PL_DHashTableOperate(&sNPObjWrappers, npobj, PL_DHASH_ADD));
 
   if (PL_DHASH_ENTRY_IS_FREE(entry)) {
     return nsnull;
   }
