diff --git a/content/xbl/src/nsXBLPrototypeBinding.cpp b/content/xbl/src/nsXBLPrototypeBinding.cpp
--- a/content/xbl/src/nsXBLPrototypeBinding.cpp
+++ b/content/xbl/src/nsXBLPrototypeBinding.cpp
@@ -1461,16 +1461,38 @@ nsXBLPrototypeBinding::CreateKeyHandlers
       if (handler)
         handler->AddProtoHandler(curr);
     }
 
     curr = curr->GetNextHandler();
   }
 }
 
+class XBLPrototypeSetupCleanup
+{
+public:
+  XBLPrototypeSetupCleanup(nsXBLDocumentInfo* aDocInfo, const nsACString& aID)
+  : mDocInfo(aDocInfo), mID(aID) {}
+
+  ~XBLPrototypeSetupCleanup()
+  {
+    if (mDocInfo) {
+      mDocInfo->RemovePrototypeBinding(mID);
+    }
+  }
+
+  void Disconnect()
+  {
+    mDocInfo = nsnull;
+  }
+
+  nsXBLDocumentInfo* mDocInfo;
+  nsCAutoString mID;
+};
+
 nsresult
 nsXBLPrototypeBinding::Read(nsIObjectInputStream* aStream,
                             nsXBLDocumentInfo* aDocInfo,
                             nsIDocument* aDocument,
                             PRUint8 aFlags)
 {
   mInheritStyle = (aFlags & XBLBinding_Serialize_InheritStyle) ? true : false;
 
@@ -1545,33 +1567,32 @@ nsXBLPrototypeBinding::Read(nsIObjectInp
   rv = Init(id, aDocInfo, nsnull, isFirstBinding);
   NS_ENSURE_SUCCESS(rv, rv);
 
   // We need to set the prototype binding before reading the nsXBLProtoImpl,
   // as it may be retrieved within.
   rv = aDocInfo->SetPrototypeBinding(id, this);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  XBLPrototypeSetupCleanup cleanup(aDocInfo, id);  
+
   nsCAutoString className;
   rv = aStream->ReadCString(className);
   NS_ENSURE_SUCCESS(rv, rv);
 
   if (!className.IsEmpty()) {
     nsXBLProtoImpl* impl; // NS_NewXBLProtoImpl will set mImplementation for us
     NS_NewXBLProtoImpl(this, NS_ConvertUTF8toUTF16(className).get(), &impl);
 
     // This needs to happen after SetPrototypeBinding as calls are made to
     // retrieve the mapped bindings from within here. However, if an error
     // occurs, the mapping should be removed again so that we don't keep an
     // invalid binding around.
     rv = mImplementation->Read(context, aStream, this, globalObject);
-    if (NS_FAILED(rv)) {
-      aDocInfo->RemovePrototypeBinding(id);
-      return rv;
-    }
+    NS_ENSURE_SUCCESS(rv, rv);
   }
 
   // Next read in the handlers.
   nsXBLPrototypeHandler* previousHandler = nsnull;
 
   do {
     XBLBindingSerializeDetails type;
     rv = aStream->Read8(&type);
@@ -1618,16 +1639,17 @@ nsXBLPrototypeBinding::Read(nsIObjectInp
     AddResource(type == XBLBinding_Serialize_Stylesheet ? nsGkAtoms::stylesheet :
                                                           nsGkAtoms::image, src);
   } while (1);
 
   if (isFirstBinding) {
     aDocInfo->SetFirstPrototypeBinding(this);
   }
 
+  cleanup.Disconnect();
   return NS_OK;
 }
 
 static
 bool
 GatherInsertionPoints(nsHashKey *aKey, void *aData, void* aClosure)
 {
   ArrayOfInsertionPointsByContent* insertionPointsByContent =
