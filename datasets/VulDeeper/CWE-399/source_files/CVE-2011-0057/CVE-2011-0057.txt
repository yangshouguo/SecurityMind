diff --git a/js/src/xpconnect/public/nsAutoJSValHolder.h b/js/src/xpconnect/public/nsAutoJSValHolder.h
--- a/js/src/xpconnect/public/nsAutoJSValHolder.h
+++ b/js/src/xpconnect/public/nsAutoJSValHolder.h
@@ -51,17 +51,16 @@
  */
 class nsAutoJSValHolder
 {
 public:
 
   nsAutoJSValHolder()
     : mRt(NULL)
     , mVal(JSVAL_NULL)
-    , mGCThing(NULL)
     , mHeld(JS_FALSE)
   {
     // nothing to do
   }
 
   /**
    * Always release on destruction.
    */
@@ -73,46 +72,45 @@ public:
    * Hold by rooting on the context's runtime.
    */
   JSBool Hold(JSContext* aCx) {
     return Hold(JS_GetRuntime(aCx));
   }
 
   /**
    * Hold by rooting on the runtime.
-   * Note that mGCThing may be JSVAL_NULL, which is not a problem.
+   * Note that mVal may be JSVAL_NULL, which is not a problem.
    */
   JSBool Hold(JSRuntime* aRt) {
     if (!mHeld) {
-      if (js_AddGCThingRootRT(aRt, &mGCThing, "nsAutoJSValHolder")) {
+      if (js_AddRootRT(aRt, &mVal, "nsAutoJSValHolder")) {
         mRt = aRt;
         mHeld = JS_TRUE;
       } else {
         Release(); // out of memory
       }
     }
     return mHeld;
   }
 
   /**
-   * Manually release, nullifying mVal, mGCThing, and mRt, but returning
+   * Manually release, nullifying mVal, and mRt, but returning
    * the original jsval.
    */
   jsval Release() {
     NS_ASSERTION(!mHeld || mRt, "Bad!");
 
     jsval oldval = mVal;
 
     if (mHeld) {
-      js_RemoveRoot(mRt, &mGCThing); // infallible
+      js_RemoveRoot(mRt, &mVal); // infallible
       mHeld = JS_FALSE;
     }
 
     mVal = JSVAL_NULL;
-    mGCThing = NULL;
     mRt = NULL;
 
     return oldval;
   }
 
   /**
    * Determine if Hold has been called.
    */
@@ -149,22 +147,18 @@ public:
 
   nsAutoJSValHolder &operator=(jsval aOther) {
 #ifdef DEBUG
     if (JSVAL_IS_OBJECT(aOther) && JSVAL_TO_OBJECT(aOther)) {
       NS_ASSERTION(mHeld, "Not rooted!");
     }
 #endif
     mVal = aOther;
-    mGCThing = JSVAL_IS_GCTHING(aOther)
-             ? JSVAL_TO_GCTHING(aOther)
-             : NULL;
     return *this;
   }
 
 private:
   JSRuntime* mRt;
   jsval mVal;
-  void* mGCThing;
   JSBool mHeld;
 };
 
 #endif /* __NSAUTOJSVALHOLDER_H__ */
